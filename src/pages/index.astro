---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import Circle from "../components/Circle.astro";
import Canvas from "../components/Canvas.astro";
import Dopper from "../components/Dopper.astro";
import Bril from "../components/Bril.astro";
import Oorbel from "../components/Oorbel.astro";
import WC from "../components/WC.astro";
import Museum from "../components/Museum.astro";
import { SEO } from "astro-seo";
---

<!doctype html>
<html lang="nl">
	<head>
		<SEO
			title="Kijkgat"
			description="Een gat om door te kijken"
			openGraph={{
				basic: {
					title: "Kijkgat",
					type: "website",
					image: "./kijkgatlogo.svg",
				},
			}}
		/>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />

		<style>
			#canvas_container {
				position: relative;
				width: 100vw;
				height: 80vh;
			}
		</style>
	</head>

	<body>
		<Header title={SITE_TITLE} />

		<main>
			<section id="canvas_container">
				<Canvas />
			</section>

			<section>
				<h1>Kijkgat</h1>
			</section>

			<!-- 
			<script>
				import * as THREE from "three";
				import { OBJLoader } from "three/addons/loaders/OBJLoader.js";
				import { OrbitControls } from "three/addons/controls/OrbitControls.js";

				let camera, scene, renderer;
				let object;

				const sectionContainer = document.getElementById("kijkgat");

				const startWidth = sectionContainer?.clientWidth - 100;

				init();

				function init() {
					camera = new THREE.PerspectiveCamera(45, startWidth / 610, 0.1, 20);
					camera.position.z = 2.5;

					// scene

					scene = new THREE.Scene();

					const ambientLight = new THREE.AmbientLight(0xffffff);
					scene.add(ambientLight);

					const pointLight = new THREE.PointLight(0xffffff, 15);
					camera.add(pointLight);
					scene.add(camera);

					// manager

					function loadModel() {
						object.position.y = 0;
						object.scale.setScalar(0.2);

						scene.add(object);

						animate(); // Start animation loop
					}

					const manager = new THREE.LoadingManager(loadModel);

					function onProgress(xhr) {
						if (xhr.lengthComputable) {
							const percentComplete = (xhr.loaded / xhr.total) * 100;
							console.log(
								"model " + percentComplete.toFixed(2) + "% downloaded",
							);
						}
					}

					function onError() {}

					const loader = new OBJLoader(manager);
					loader.load(
						"kijkgat.obj",
						function (obj) {
							object = obj;
						},
						onProgress,
						onError,
					);

					//

					renderer = new THREE.WebGLRenderer({ antialias: true });
					renderer.setPixelRatio(window.devicePixelRatio);
					renderer.setClearColor(new THREE.Color("#FFF9E8")); // Set background color
					renderer.setSize(startWidth, 610);

					const kijkgat = document.getElementById("kijkgat");

					if (kijkgat) {
						kijkgat.appendChild(renderer.domElement);
					}

					//

					const controls = new OrbitControls(camera, renderer.domElement);
					controls.minDistance = 2;
					controls.maxDistance = 5;
					controls.enableZoom = false;
					controls.enablePan = false;
					controls.addEventListener("change", render);

					//

					window.addEventListener("resize", onWindowResize);
				}

				function onWindowResize() {
					camera.aspect = window.innerWidth / window.innerHeight;
					camera.updateProjectionMatrix();

					renderer.setSize(window.innerWidth, window.innerHeight);
				}

				function animate() {
					requestAnimationFrame(animate);

					// Add a small rotation to the object
					if (object) {
						object.rotation.y += 0.005;
					}

					render();
				}

				function render() {
					renderer.render(scene, camera);
				}

				// JavaScript to access the camera and stream it to the video element
				async function initCamera() {
					const button = document.getElementById("activateCamera");
					const container = document.getElementById("camera-container");

					if (button && container) {
						button.style.display = "none";
						container.style.display = "block";
					}

					try {
						const stream = await navigator.mediaDevices.getUserMedia({
							audio: false,
							video: {
								facingMode: "environment",
							},
						});
						const videoElement = document.getElementById("camera-view");
						if (!videoElement) {
							console.error("Video element not found");
						} else {
							videoElement.srcObject = stream;
						}
					} catch (error) {
						console.error("Error accessing the camera:", error);
					}
				}
				let activateCameraButton = document.getElementById("activateCamera");

				if (activateCameraButton) {
					activateCameraButton.addEventListener("click", initCamera);
				} -->
		</main>
	</body>
</html>
