---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import Circle from "../components/Circle.astro";
import Canvas from "../components/Canvas.astro";
import Dopper from "../components/Dopper.astro";
import Bril from "../components/Bril.astro";
import Oorbel from "../components/Oorbel.astro";
import WC from "../components/WC.astro";
import Museum from "../components/Museum.astro";
import { SEO } from "astro-seo";
---

<!doctype html>
<html lang="nl">
	<head>
		<SEO
			title="Kijkgat"
			description="Een gat om door te kijken"
			openGraph={{
				basic: {
					title: "Kijkgat",
					type: "website",
					image: "./kijkgatlogo.svg",
				},
			}}
		/>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
	</head>

	<body>
		<Header title={SITE_TITLE} />

		<main>
			<section>
				<h1>Kijkgat &copy;</h1>
			</section>
			<section id="kijkgat"></section>
			<section>
				<div class="marquee">
					<div>
						-Kijkgat - Guckloch - Titthål - глазок - Trou à regarder - Ovisilmä
						- Néző lyuk - Peephole - Mirilla - Kighul - Sjochgat - Gözetleme
						deliği - Kíki -
					</div>
				</div>
				<div class="marquee-reverse">
					<div>
						-Kijkgat - Guckloch - Titthål - глазок - Trou à regarder - Ovisilmä
						- Néző lyuk - Peephole - Mirilla - Kighul - Sjochgat - Gözetleme
						deliği - Kíki -
					</div>
				</div>
			</section>

			<section id="ervaar">
				<h2>Ervaar</h2>
				<p>
					Kijkgat helpt stil te staan bij kleine mooiigheden. Het leert je
					focussen, verbeelden, een stap terug te nemen en de wereld te
					waarderen voor wat het is. Het laat je verwonderen over details,
					lijnen, patronen, sporen en kleuren. Kijkgat helpt om te zoeken, te
					kijken en te zien.
				</p>
				<Circle />
			</section>

			<section id="canvas_container">
				<Canvas />
			</section>

			<section id="niet">
				<h2>Wat is het niet:</h2>

				<div class="not_container">
					<div>
						<h3>Een dopperlabel</h3>
						<Dopper />
					</div>
					<div>
						<h3>Een bril</h3>
						<Bril />
					</div>
					<div>
						<h3>Een wc-bril</h3>
						<WC />
					</div>
					<div>
						<h3>Een oorbel</h3>
						<Oorbel />
					</div>
					<div>
						<h3>Een museumjaarkaart</h3>
						<Museum />
					</div>
				</div>

				<section id="contact">
					<h2>Contact</h2>
					<div class="try">
						<button id="activateCamera">Ik durf wel wat</button>
						<div id="camera-container">
							<h6 class="text-overlay">
								Zien wij elkaar bij een workshop? <a
									href="mailto:kijkgat@outlook.com">kijkgat@outlook.com</a
								>
							</h6>
							<video id="camera-view" autoplay playsinline></video>
						</div>
					</div>
				</section>
			</section>
			<Footer />
			<script>
				import * as THREE from "three";
				import { OBJLoader } from "three/addons/loaders/OBJLoader.js";
				import { OrbitControls } from "three/addons/controls/OrbitControls.js";

				let camera, scene, renderer;
				let object;

				const sectionContainer = document.getElementById("kijkgat");

				const startWidth = sectionContainer?.clientWidth - 100;

				init();

				function init() {
					camera = new THREE.PerspectiveCamera(45, startWidth / 610, 0.1, 20);
					camera.position.z = 2.5;

					// scene

					scene = new THREE.Scene();

					const ambientLight = new THREE.AmbientLight(0xffffff);
					scene.add(ambientLight);

					const pointLight = new THREE.PointLight(0xffffff, 15);
					camera.add(pointLight);
					scene.add(camera);

					// manager

					function loadModel() {
						object.position.y = 0;
						object.scale.setScalar(0.2);

						scene.add(object);

						animate(); // Start animation loop
					}

					const manager = new THREE.LoadingManager(loadModel);

					function onProgress(xhr) {
						if (xhr.lengthComputable) {
							const percentComplete = (xhr.loaded / xhr.total) * 100;
							console.log(
								"model " + percentComplete.toFixed(2) + "% downloaded",
							);
						}
					}

					function onError() {}

					const loader = new OBJLoader(manager);
					loader.load(
						"kijkgat.obj",
						function (obj) {
							object = obj;
						},
						onProgress,
						onError,
					);

					//

					renderer = new THREE.WebGLRenderer({ antialias: true });
					renderer.setPixelRatio(window.devicePixelRatio);
					renderer.setClearColor(new THREE.Color("#FFF9E8")); // Set background color
					renderer.setSize(startWidth, 610);

					const kijkgat = document.getElementById("kijkgat");

					if (kijkgat) {
						kijkgat.appendChild(renderer.domElement);
					}

					//

					const controls = new OrbitControls(camera, renderer.domElement);
					controls.minDistance = 2;
					controls.maxDistance = 5;
					controls.enableZoom = false;
					controls.enablePan = false;
					controls.addEventListener("change", render);

					//

					window.addEventListener("resize", onWindowResize);
				}

				function onWindowResize() {
					camera.aspect = window.innerWidth / window.innerHeight;
					camera.updateProjectionMatrix();

					renderer.setSize(window.innerWidth, window.innerHeight);
				}

				function animate() {
					requestAnimationFrame(animate);

					// Add a small rotation to the object
					if (object) {
						object.rotation.y += 0.005;
					}

					render();
				}

				function render() {
					renderer.render(scene, camera);
				}

				// JavaScript to access the camera and stream it to the video element
				async function initCamera() {
					const button = document.getElementById("activateCamera");
					const container = document.getElementById("camera-container");

					if (button && container) {
						button.style.display = "none";
						container.style.display = "block";
					}

					try {
						const stream = await navigator.mediaDevices.getUserMedia({
							audio: false,
							video: {
								facingMode: "environment",
							},
						});
						const videoElement = document.getElementById("camera-view");
						if (!videoElement) {
							console.error("Video element not found");
						} else {
							videoElement.srcObject = stream;
						}
					} catch (error) {
						console.error("Error accessing the camera:", error);
					}
				}
				let activateCameraButton = document.getElementById("activateCamera");

				if (activateCameraButton) {
					activateCameraButton.addEventListener("click", initCamera);
				}
			</script>
		</main>
	</body>
</html>
